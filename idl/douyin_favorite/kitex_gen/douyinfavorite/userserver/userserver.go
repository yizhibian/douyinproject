// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userserver

import (
	"context"
	douyinfavorite "douyin-user/idl/douyin_favorite/kitex_gen/douyinfavorite"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServerServiceInfo
}

var userServerServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserServer"
	handlerType := (*douyinfavorite.UserServer)(nil)
	methods := map[string]kitex.MethodInfo{
		"like":        kitex.NewMethodInfo(likeHandler, newUserServerLikeArgs, newUserServerLikeResult, false),
		"getVideoIds": kitex.NewMethodInfo(getVideoIdsHandler, newUserServerGetVideoIdsArgs, newUserServerGetVideoIdsResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyinfavorite",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func likeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyinfavorite.UserServerLikeArgs)
	realResult := result.(*douyinfavorite.UserServerLikeResult)
	success, err := handler.(douyinfavorite.UserServer).Like(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServerLikeArgs() interface{} {
	return douyinfavorite.NewUserServerLikeArgs()
}

func newUserServerLikeResult() interface{} {
	return douyinfavorite.NewUserServerLikeResult()
}

func getVideoIdsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*douyinfavorite.UserServerGetVideoIdsArgs)
	realResult := result.(*douyinfavorite.UserServerGetVideoIdsResult)
	success, err := handler.(douyinfavorite.UserServer).GetVideoIds(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServerGetVideoIdsArgs() interface{} {
	return douyinfavorite.NewUserServerGetVideoIdsArgs()
}

func newUserServerGetVideoIdsResult() interface{} {
	return douyinfavorite.NewUserServerGetVideoIdsResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Like(ctx context.Context, req *douyinfavorite.LikeRequest) (r *douyinfavorite.LikeResponse, err error) {
	var _args douyinfavorite.UserServerLikeArgs
	_args.Req = req
	var _result douyinfavorite.UserServerLikeResult
	if err = p.c.Call(ctx, "like", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoIds(ctx context.Context, req *douyinfavorite.GetVideoIdsRequest) (r *douyinfavorite.GetVideoIdsResponse, err error) {
	var _args douyinfavorite.UserServerGetVideoIdsArgs
	_args.Req = req
	var _result douyinfavorite.UserServerGetVideoIdsResult
	if err = p.c.Call(ctx, "getVideoIds", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
